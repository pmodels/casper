                                 Casper Notes

====================================
Introduction
====================================

This project provides a portable and flexible process-based asynchronous progress
model for MPI remote memory access (RMA) communication.


====================================
Getting Started
====================================
1. Installation
    ./configure --prefix=<your installation dir> CC=<your mpicc>
    make
    make install

2. Link with MPI Program
    [Example]
    mpicc -o test test.c -lcasper -lmpich

3. Execution
    You can set the number of ghost processes per node through the environment
    variable CSP_NG, it is set to 1 by default.

    [Example 1]
    Running on 2 node, 2 ghost processes and 6 user processes on eacn node.
    export CSP_NG=2
    mpiexec -np 16 -ppn 8 ./test

    [Example 2]
    Running on 4 node, 4 ghost processes and 20 user processes on eacn node.
    export CSP_NG=4
    mpiexec -np 96 -ppn 24 ./test


====================================
Support
====================================
If you have problems or need any assistance about the Casper installation and
usage, please contact casper-users@lists.mpich.org mailing list.


====================================
Bug Reporting
====================================
If you have found a bug in Casper, please contact casper-users@lists.mpich.org
mailing list. If possible, please try to reproduce the error with a smaller
application or benchmark and send that along in your bug report.


====================================
Casper Test Suite
====================================
Capser includes a set of testing programs located under test/. These programs
can be compiled and run via:
cd <your installation dir>/test
make
make testing MPIEXEC=mpiexec


====================================
Environment Variables
====================================
1. Basic Variables
    CSP_NG (integer)
    Specify the number of ghost processes per node, 1 by default.

2. Advanced Variables (Only specify them if you know what they mean)
    CSP_RUMTIME_LOAD_OPT (random|op|byte, default random)
    Specify how to distribute operations when runtime load balancing enabled,
    random by default.

    CSP_RUNTIME_LOAD_LOCK (nature|force, default nature)
    Specify how to grant lock when runtime load balancing enabled, nature
    by default.


====================================
Debugging Options
====================================
Enable debugging messages by compiling with "-DDEBUG -DCSPG_DEBUG".
    ./configure --prefix=<your installation dir> CC=<your mpicc> \
                CFLAGS="-DDEBUG -DCSPG_DEBUG"
    make && make install


====================================
Known Issues
====================================
1. Some MPI features are not or partially supported in Casper.
    a. MPI Fortran Binding
    Some MPI Fortran routines are not translated into MPI standard
    functions, thus cannot be correctly wrapped in Casper. For example,
    MPICH uses MPIR_* functions to implement following Fortran routines:
        mpi_comm_get_attr_
        mpi_comm_set_attr_
        mpi_type_get_attr_
        mpi_type_set_attr_
        mpi_win_get_attr_
        mpi_win_set_attr_
        mpi_attr_get_
        mpi_attr_put_

    b. Dynamic Process Routine
    c. Fault Tolerance

2. Casper currently ignores user info "alloc_shared_noncontig=true" in
   MPI_Win_allocate, to avoid complex management of shared segments
   displacement on ghost processes.

3. Casper does not support MPI Error Handler Callback in C++ and Fortran 
   Binding.
