#!/bin/bash

path=$(pwd)

##########################################################
# test configuration with default value

# - mpiexec command
test_mpiexec="mpiexec -np"

# - test mode (manual|auto)
#   manual|m: test user specified setting (np in MPIEXEC, ng in NG or default 1)
#   auto|a:   test multiple predefined sets of np & ng
test_mode=m

# - number of ghost processes (only used in manual test mode)
test_ng=1
# - number of processes (only used in manual test mode)
test_np=4

function print_usage()
{
    echo "Input Variables:"
    echo "  MPIEXEC=<execution command>"
    echo "  NP=<number of processes including both user and ghost processes, default 4>"
    echo "  NG=<number of ghost processes, default 1>"
    echo "  MODE=<testing mode, value auto|a|manual|m, default m>"
    echo "      AUTO mode (auto|a):   only MPIEXEC is valid input, NP and NG are ignored;"
    echo "      MANUAL mode(manual|m):  MPIEXEC, NP, NG are valid input"
    echo "  Example 1: MPIEXEC=\"mpiexec -ppn 2 -np\" NP=4 NG=1,
            executes all tests on two nodes with 1 user process and 1 ghost process on each node"
    echo "  Example 2: MPIEXEC=\"srun -N 4 -n\" NP=8 NG=1 (on Cray supercomputer),
            executes all tests on four nodes with 1 user process and 1 ghost process on each node"
    echo "  Example 3: MPIEXEC=\"mpiexec -ppn 2 -np\" MODE=auto,
            executes all tests on two nodes, with predefined sets of NP and NG."
}

##########################################################
# read input arguments

case $1 in
    -h | --help )    print_usage
                    exit
                    ;;
esac

if [ "x$MPIEXEC" != "x" ]; then
    test_mpiexec="$MPIEXEC"
fi

if [ "x$MODE" != "x" ]; then
    case $MODE in
        a | auto )     test_mode=a
                        ;;
        m | manual )    test_mode=m
                        ;;
    esac
fi

if [ "$test_mode" = "m" ]; then
    if [ "x$NP" != "x" ]; then
        # overwrite mode if input is valid
        if [ "$NP" -ge "2" ]; then
            test_np=$NP
        fi
    fi

    if [ "x$NG" != "x" ]; then
        # overwrite mode if input is valid
        if [ "$NG" -ge "1" ]; then
            test_ng=$NG
        fi
    fi
fi
##########################################################
# read testlist and initialize global varibales

programs=
exec_flags=
num_progs=0
num_failed=0

# read from testlist
first=1
while read LINE
do
    #skip the first commend line
    if [ $first -eq 1 ];then
        first=0
        continue
    fi

    # parse format: program exec_flag
    f=$(echo $LINE|awk '{print $1}')
    flag=$(echo $LINE|awk '{print $2}')

    if [ -f $path/$f ];then
        programs[$num_progs]=$f

        # do not execute test if the flag is set but not equal to 1
        if [ "x$flag" != "x" ] && [ "$flag" != "exec=1" ];then
                exec_flags[$num_progs]=0
        else
                exec_flags[$num_progs]=1
        fi
        let num_progs+=1
    fi
done < ./testlist

##########################################################
# generic functions

# - execute a test program
#   exec_program <mpiexec> <relative path of testfile>
function exec_program()
{
    mpiexec=$1
    f=$2
    program="$path/$f"

    echo "testing mpiexec=$mpiexec CSP_NG=$CSP_NG $f ..."
    exec 5>&1
    output=$($mpiexec $program | tee /dev/fd/5 )
    rs="$(echo $output | grep "PASS"  --count)"
    if [ $rs != 1 ];then
        echo "test failed ! $mpiexec $program"
        let num_failed+=1
    fi
    echo ""
}

# - execute all test programs (CSP_NG must be set by caller)
#   exec_all_programs <mpiexec>
function exec_all_programs()
{
    mpiexec=$1

    if [ "x$CSP_NG" = "x" ] || [ "$CSP_NG" -lt "1" ];then
        echo "invalid CSP_NG=$CSP_NG !"
        exit
    fi

    i=0
    while [ $i -lt $num_progs ]
    do
        f=${programs[$i]}
        exec=${exec_flags[$i]}

        if [ "$exec" -eq "0" ]; then
            echo "skip test $f"
            let i+=1
            continue
        fi

        exec_program "$mpiexec" $f
        let i+=1
    done
}

##########################################################
# execute test programs

if [ "$test_mode" = "a" ];then
    # User only provides MPIEXEC (execution command including all
    # parameters in front of <np>)
    # Example: MPIEXEC="mpiexec -f hostfile -np", or "srun -N 2 -n"

    echo "#############################"
    echo "# Casper Test in Auto Mode"
    echo "#############################"

    np=4
    ng=1
    export CSP_NG=$ng
    exec_all_programs "$test_mpiexec $np"

    np=8
    ng=1
    export CSP_NG=$ng
    exec_all_programs "$test_mpiexec $np"

    np=8
    ng=2
    export CSP_NG=$ng
    exec_all_programs "$test_mpiexec $np"

    np=10
    ng=2
    export CSP_NG=$ng
    exec_all_programs "$test_mpiexec $np"

    np=16
    ng=2
    export CSP_NG=$ng
    exec_all_programs "$test_mpiexec $np"
else
    # User provides MPIEXEC, NP (or default 4) and NG (or default 1)

    echo "#############################"
    echo "# Casper Test in Manual Mode"
    echo "#############################"
    echo ""

    export CSP_NG=$test_ng
    exec_all_programs "$test_mpiexec $test_np"
fi

if [ "$num_failed" -ge "1" ];then
    echo "$num_failed tests failed"
else
    echo "all passed"
fi
