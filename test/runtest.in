#! /usr/bin/env bash

path=$(pwd)
mpicc=@CC@
abs_top_srcdir=@abs_top_srcdir@

##########################################################
# test configuration with default value

# - mpiexec command
test_mpiexec="mpiexec -np"

# - test mode (manual|auto)
#   manual|m: test user specified setting (np in MPIEXEC, ng in NG or default 1)
#   auto|a:   test multiple predefined sets of np & ng
test_mode=m

# - auto test max number of processes (default - no limit)
test_max_np=16

# - number of ghost processes (only used in manual test mode)
test_ng=1
# - number of processes (only used in manual test mode)
test_np=4

# - output
JUNIT_OUTPUT=""
JUNIT_ENABLED=0 # only enable junit ouput when user specified JUNIT

function print_usage()
{
    echo "Input Variables:"
    echo "  MPIEXEC=<execution command>"
    echo "  NP=<number of processes including both user and ghost processes, default 4>"
    echo "  NG=<number of ghost processes, default 1>"
    echo "  MAX_NP=<max number of processes generated for automatic test, default no limit>"
    echo "  MODE=<testing mode, value auto|a|manual|m, default m>"
    echo "      AUTO mode (auto|a):   only MPIEXEC and MAX_NP are valid input, NP and NG are ignored;"
    echo "      MANUAL mode(manual|m):  MPIEXEC, NP, NG are valid input"
    echo "  JUNIT=<output file in junit format>"
    echo "  Example 1: MPIEXEC=\"mpiexec -ppn 2 -np\" NP=4 NG=1,
            executes all tests on two nodes with 1 user process and 1 ghost process on each node"
    echo "  Example 2: MPIEXEC=\"srun -N 4 -n\" NP=8 NG=1 (on Cray supercomputer),
            executes all tests on four nodes with 1 user process and 1 ghost process on each node"
    echo "  Example 3: MPIEXEC=\"mpiexec -ppn 2 -np\" MODE=auto,
            executes all tests on two nodes, with predefined sets of NP and NG."
}

##########################################################
# read input arguments

case $1 in
    -h | --help )    print_usage
                    exit
                    ;;
esac

if [ "x$MPIEXEC" != "x" ]; then
    test_mpiexec="$MPIEXEC"
fi

if [ "x$MODE" != "x" ]; then
    case $MODE in
        a | auto )     test_mode=a
                        ;;
        m | manual )    test_mode=m
                        ;;
    esac
fi

if [ "$test_mode" = "m" ]; then
    if [ "x$NP" != "x" ]; then
        # overwrite mode if input is valid
        if [ "$NP" -ge "2" ]; then
            test_np=$NP
        fi
    fi

    if [ "x$NG" != "x" ]; then
        # overwrite mode if input is valid
        if [ "$NG" -ge "0" ]; then
            test_ng=$NG
        fi
    fi
else
    if [ "x$MAX_NP" != "x" ]; then
        test_max_np=$MAX_NP
    fi
fi

if [ "x$JUNIT" != "x" ]; then
    JUNIT_ENABLED=1
    JUNIT_OUTPUT="$JUNIT"
    echo "" > $JUNIT_OUTPUT
fi

##########################################################
# detect MPI type (ompi|mpich|impi) and read xfails file

mpi_type=mpich
mpicc_base=$(basename $mpicc)
tmp_mpidir=$(which $mpicc 2>/dev/null)
mpidir=`echo $tmp_mpidir| sed -e 's_/[^/]*$__g'`/../
if [ -d $mpidir ] && [ -f $mpidir/bin/ompi_info ]; then
    mpi_type=ompi
elif [ -d $mpidir ] && [ -f $mpidir/bin/mpichversion ]; then
    mpi_type=mpich
elif [ "$mpicc_base" = "mpiicc" ]; then
    mpi_type=impi
fi

xfailf="$abs_top_srcdir/xfail.$mpi_type"
num_xfails=0
xfail_programs=
xfail_nps=
xfail_ngs=

# ignore xfail file if does not exist
if [ -f $xfailf ]; then
    echo "Parsing $xfailf"
    first=1
    while read LINE
    do
        #skip the first commend line
        if [ $first -eq 1 ];then
            first=0
            continue
        fi

        # parse format: program np ng
        f=$(echo "$LINE"|awk '{print $1}')
        np=$(echo "$LINE"|awk '{print $2}')
        ng=$(echo "$LINE"|awk '{print $3}')

        if [ -f $path/$f ];then
            xfail_programs[$num_xfails]=$f
            xfail_nps[$num_xfails]=$np
            xfail_ngs[$num_xfails]=$ng
            let num_xfails+=1
        fi
    done < $xfailf
fi

##########################################################
# read testlist and initialize global varibales

programs=
exec_flags=
num_progs=0
num_failed=0

# read from testlist
first=1
while read LINE
do
    #skip the first commend line
    if [ $first -eq 1 ];then
        first=0
        continue
    fi

    # parse format: program exec_flag
    f=$(echo $LINE|awk '{print $1}')
    flag=$(echo $LINE|awk '{print $2}')

    if [ -f $path/$f ];then
        programs[$num_progs]=$f

        # do not execute test if the flag is set but not equal to 1
        if [ "x$flag" != "x" ] && [ "$flag" != "exec=1" ];then
                exec_flags[$num_progs]=0
        else
                exec_flags[$num_progs]=1
        fi
        let num_progs+=1
    fi
done < ./testlist

##########################################################
# generic functions

# - Junit global variables
JUNIT_TEMP_OUTPUT=".tmp.$JUNIT_OUTPUT"
JUNIT_TEST_ID=1
JUNIT_NUM_FAILED=0
JUNIT_NUM_SKIPPED=0

# - Junit related routines (internal)
function junit_temp_print()
{
    echo "$1" >> $JUNIT_TEMP_OUTPUT
}

function junit_report_testcase()
{
    local test_exec=$1
    local test_result=$2 #0: passed, 1: failed, 2: skipped
    local test_output=$3
    local test_tag="failure"
    local test_type="TestFailed"

    # do nothing if JUNIT is not explicitly enabled
    if [ $JUNIT_ENABLED -eq 0 ]; then
        return
    fi

    case $test_result in
        1)
            test_tag="failure"
            test_type="TestFailed"
            let "JUNIT_NUM_FAILED+=1"
        ;;
        2)
            test_tag="skipped"
            test_type="TestSkipped"
            let "JUNIT_NUM_SKIPPED+=1"
        ;;
    esac

    junit_temp_print "    <testcase name=\"$JUNIT_TEST_ID - $test_exec\">"
    if [ $test_result -gt 0 ]; then
        junit_temp_print "      <$test_tag type=\"$test_type\""
        junit_temp_print "               message=\"$test_type: $JUNIT_TEST_ID - $test_exec\"><![CDATA["
        junit_temp_print "Test $test_tag: $JUNIT_TEST_ID - $test_exec"
        junit_temp_print "$test_output"
        junit_temp_print "---"
        junit_temp_print "      ]]></$test_tag>\n"
    fi
    junit_temp_print "    </testcase>"

    let "JUNIT_TEST_ID+=1"
}

function junit_report_init()
{
    # do nothing if JUNIT is not explicitly enabled
    if [ $JUNIT_ENABLED -eq 0 ]; then
        return
    fi

    # reset junit output files
    echo "" > $JUNIT_TEMP_OUTPUT 
    echo "" > $JUNIT_OUTPUT
}

function junit_report_finish()
{
    local num_tested=0
    local datetime=""

    # do nothing if JUNIT is not explicitly enabled
    if [ $JUNIT_ENABLED -eq 0 ]; then
        return
    fi

    let "num_tested=$JUNIT_TEST_ID-1"
    datetime=$(date "+%Y-%m-%d-%H-%M-%S")

    cat > $JUNIT_OUTPUT <<EOF
<testsuites>
  <testsuite failures="$JUNIT_NUM_FAILED"
             errors="0"
             skipped="$JUNIT_NUM_SKIPPED"
             tests="$num_tested"
             date="$datetime"
             name="test_results_xml">
EOF
    cat $JUNIT_TEMP_OUTPUT >> $JUNIT_OUTPUT
    cat >> $JUNIT_OUTPUT <<EOF
    <system-out></system-out>
    <system-err></system-err>
  </testsuite>
</testsuites>
EOF
    rm -f $JUNIT_TEMP_OUTPUT
}

# - check xfail for a test program 
#   check_xfail <testfile> <np> <CSP_NG>
function check_xfail()
{
    fpath=$1
    np=$2
    ng=$3
    f=$(basename $fpath)

    xi=0
    while [ $xi -lt $num_xfails ]
    do
        xfail_prog=${xfail_programs[$xi]}
        xfail_np=${xfail_nps[$xi]}
        xfail_ng=${xfail_ngs[$xi]}

        if [ "$f" = "$xfail_prog" ] ; then
            if [ "$np" = "$xfail_np" ] ||  [ "*" = "$xfail_np" ]; then
                if [ "$ng" = "$xfail_ng" ] ||  [ "*" = "$xfail_ng" ]; then
                    echo "1"
                    return
                fi
            fi
        fi
        let xi+=1
    done
    echo "0"
}

# - execute a test program
#   exec_program <mpiexec> <relative path of testfile>
function exec_program()
{
    mpiexec=$1
    f=$2
    program="$path/$f"

    echo "testing mpiexec=$mpiexec CSP_NG=$CSP_NG $f ..."
    exec 5>&1
    output=$($mpiexec $program | tee /dev/fd/5 )
    rs="$(echo $output | grep "PASS"  --count)"
    if [ $rs != 1 ];then
        echo "test failed ! $mpiexec $program"

        # junit_report_testcase <exec> <result:0:pass | 1:failed | 2:skipped> <output>
        junit_report_testcase "CSP_NG=$CSP_NG; $mpiexec $f" "1" "$output"

        let num_failed+=1
    else
        junit_report_testcase "CSP_NG=$CSP_NG; $mpiexec $f" "0"
    fi
    echo ""
}

# - execute all test programs (CSP_NG must be set by caller)
#   exec_all_programs <mpiexec>
function exec_all_programs()
{
    mpiexec=$1
    np=$2

    if [ "x$CSP_NG" = "x" ] || [ "$CSP_NG" -lt "0" ];then
        echo "invalid CSP_NG=$CSP_NG !"
        exit
    fi

    i=0
    while [ $i -lt $num_progs ]
    do
        f=${programs[$i]}
        exec=${exec_flags[$i]}
        xfail=$(check_xfail $f $np $CSP_NG)

        if [ "$exec" -eq "0" ] || [ "$xfail" -eq "1" ]; then
            echo "skip test $f -np $np CSP_NG=$CSP_NG"
            echo ""

            # junit_report_testcase <exec> <result:0:pass | 1:failed | 2:skipped> <output>
            junit_report_testcase "CSP_NG=$CSP_NG; $mpiexec $f" "2"

            let i+=1
            continue
        fi

        exec_program "$mpiexec" $f
        let i+=1
    done
}

##########################################################
# execute test programs

junit_report_init

if [ "$test_mode" = "a" ];then
    # User only provides MPIEXEC (execution command including all
    # parameters in front of <np>)
    # Example: MPIEXEC="mpiexec -f hostfile -np", or "srun -N 2 -n"

    echo "#############################"
    echo "# Casper Test in Auto Mode"
    echo "# MAX_NP: $test_max_np    "
    echo "#############################"
    for np in 4 5 8 10; do
        if [ $np -gt $test_max_np ]; then
            break #skip larger np
        fi
        for ng in 0 1; do
            export CSP_NG=$ng
            exec_all_programs "$test_mpiexec $np" $np
        done
    done

    for np in 8 10 16; do
        if [ $np -gt $test_max_np ]; then
            break #skip larger np
        fi
        export CSP_NG=2
        exec_all_programs "$test_mpiexec $np" $np
    done
else
    # User provides MPIEXEC, NP (or default 4) and NG (or default 1)

    echo "#############################"
    echo "# Casper Test in Manual Mode"
    echo "#############################"
    echo ""

    export CSP_NG=$test_ng
    exec_all_programs "$test_mpiexec $test_np" $test_np
fi

junit_report_finish


if [ "$num_failed" -ge "1" ];then
    echo "$num_failed tests failed"
    exit 1
else
    echo "all passed"
    exit 0
fi
